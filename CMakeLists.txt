# CMake 最低版本要求。3.14 是一个比较现代且广泛可用的版本。
cmake_minimum_required(VERSION 3.14)

# 定义项目名称和所用语言 (C++)
project(PineScriptCompilerVM CXX)

# -----------------------------------------------------------------------------
# 配置项目设置
# -----------------------------------------------------------------------------

# 我们需要 C++17 标准，因为代码中使用了 std::variant 等特性。
# 这是设置 C++ 标准的现代、可移植的方式。
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF) # 推荐关闭编译器特定的扩展，以保证可移植性

# -----------------------------------------------------------------------------
# 查找并定义源文件
# -----------------------------------------------------------------------------

# 将项目的所有源文件 (.cpp) 收集到一个变量中，方便管理。
# 注意：CMake 会自动处理头文件 (.h) 的依赖关系，无需在此列出。
set(SOURCES
    main.cpp
    PineVM.cpp
    Compiler.cpp
    Parser.cpp   # 注意：你需要提供 Parser.cpp 的完整实现
    Lexer.cpp    # 注意：你需要提供 Lexer.cpp 的完整实现
)

# -----------------------------------------------------------------------------
# 定义可执行目标
# -----------------------------------------------------------------------------

# 从上面列出的源文件创建一个名为 "PineCompilerVM" 的可执行文件。
add_executable(PineCompilerVM ${SOURCES})

# -----------------------------------------------------------------------------
# 配置目标的属性
# -----------------------------------------------------------------------------

# 将当前目录添加到目标的包含路径中。
# 这是一个好习惯，可以确保 #include "PineVM.h" 等指令能被正确解析。
target_include_directories(PineCompilerVM PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

# 打印一条消息，方便用户知道配置已完成。
message(STATUS "配置完成。现在你可以构建 'PineCompilerVM' 目标了。")